<?js
var data = obj;
var self = this;
var defaultObjectClass = '';

// Check if the default value is an object or array; if so, apply code highlighting
if (data.defaultvalue && (data.defaultvaluetype === 'object' || data.defaultvaluetype === 'array')) {
    try {
        var indentedValues = JSON.stringify(JSON.parse(data.defaultvalue), null, '  ');
        data.defaultvalue = indentedValues;
    } catch (e) {}
    data.defaultvalue = "<pre class=\"prettyprint\"><code>" + data.defaultvalue + "</code></pre>";
    defaultObjectClass = ' class="object-value"';
}
?>

<dl class="details">

    <?js if (data.meta && self.outputSourceFiles) {?>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <?js= self.linkto(meta.shortpath) ?>, <?js= self.linkto(meta.shortpath, 'line ' + meta.lineno, null, 'line' + meta.lineno) ?>
    </li></ul></dd>
    <?js } ?>

    <?js if (data.version) {?>
    <dt class="tag-version">Version:</dt>
    <dd class="tag-version"><ul class="dummy"><li><span class="version"><?js= version ?></span></li></ul></dd>
    <?js } ?>

    <?js if (data.since) {?>
    <dt class="tag-since">Since:</dt>
    <dd class="tag-since"><ul class="dummy"><li><span class="version"><?js= since ?></span></li></ul></dd>
    <?js } ?>

    <?js if (data.created) {?>
    <dt class="tag-created">Created:</dt>
    <dd class="tag-created"><ul class="dummy"><li><span class="date"><?js= created ?></span></li></ul></dd>
    <?js } ?>

    <?js if (data.modified) {?>
    <dt class="tag-modified">Modified:</dt>
    <dd class="tag-modified"><ul class="dummy"><li><span class="date"><?js= modified ?></span></li></ul></dd>
    <?js } ?>

    <?js if (data.inherited && data.inherits && !data.overrides) { ?>
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <?js= this.linkto(data.inherits, this.htmlsafe(data.inherits)) ?>
    </li></ul></dd>
    <?js } ?>

    <?js if (data.overrides) { ?>
    <dt class="tag-overrides">Overrides:</dt>
    <dd class="tag-overrides"><ul class="dummy"><li>
        <?js= this.linkto(data.overrides, this.htmlsafe(data.overrides)) ?>
    </li></ul></dd>
    <?js } ?>

    <?js if (data.implementations && data.implementations.length) { ?>
    <dt class="implementations">Implementations:</dt>
    <dd class="implementations"><ul>
        <?js data.implementations.forEach(function(impl) { ?>
            <li><?js= self.linkto(impl, self.htmlsafe(impl)) ?></li>
        <?js }); ?>
    </ul></dd>
    <?js } ?>

    <?js if (data.implements && data.implements.length) { ?>
    <dt class="implements">Implements:</dt>
    <dd class="implements"><ul>
        <?js data.implements.forEach(function(impl) { ?>
            <li><?js= self.linkto(impl, self.htmlsafe(impl)) ?></li>
        <?js }); ?>
    </ul></dd>
    <?js } ?>

    <?js if (data.mixes && data.mixes.length) { ?>
        <dt class="mixes">Mixes In:</dt>

        <dd class="mixes"><ul>
        <?js data.mixes.forEach(function(a) { ?>
            <li><?js= self.linkto(a, a) ?></li>
        <?js }); ?>
        </ul></dd>
    <?js } ?>

    <?js if (data.deprecated) { ?>
        <dt class="important tag-deprecated">Deprecated:</dt><?js
            if (data.deprecated === true) { ?><dd class="yes-def tag-deprecated"><ul class="dummy"><li>Yes</li></ul></dd><?js }
            else { ?><dd><ul class="dummy"><li><?js= data.deprecated ?></li></ul></dd><?js }
        ?>
    <?js } ?>

    <?js if (data.author && author.length) {?>
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul><?js author.forEach(function(a) { ?>
            <li><?js= self.resolveAuthorLinks(a) ?></li>
        <?js }); ?></ul>
    </dd>
    <?js } ?>

    <?js if (data.copyright) {?>
    <dt class="tag-copyright">Copyright:</dt>
    <dd class="tag-copyright"><ul class="dummy"><li><?js= copyright ?></li></ul></dd>
    <?js } ?>

    <?js if (data.license) {?>
    <dt class="tag-license">License:</dt>
    <dd class="tag-license"><ul class="dummy"><li><?js= license ?></li></ul></dd>
    <?js } ?>

    <?js if (data.defaultvalue) {?>
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li<?js= defaultObjectClass ?>><?js= data.defaultvalue ?></li>
        </ul></dd>
    <?js } ?>

    <?js if (data.tutorials && tutorials.length) {?>
    <dt class="tag-tutorial">Tutorials:</dt>
    <dd class="tag-tutorial">
        <ul><?js tutorials.forEach(function(t) { ?>
            <li><?js= self.tutoriallink(t) ?></li>
        <?js }); ?></ul>
    </dd>
    <?js } ?>

    <?js if (data.see && see.length) {?>
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul><?js see.forEach(function(s) { ?>
            <li><?js= self.linkto(s) ?></li>
        <?js }); ?></ul>
    </dd>
    <?js } ?>

<?js
    var todolists = {};
	var statusOptions = {
		init : {
			text: '초기화',
			ignore: false
		},
		closed : {
			text: '완료',
			ignore: true
		},
		open : {
			text: '진행중..',
			ignore: false
	    }
    };
    var convertStatus = function (name) {
	    return (statusOptions[name]) ? statusOptions[name].text : name;
    };
    String.prototype.hashCode = function(){
	var hash = 0;
	if (this.length == 0) return hash;
	for (var i = 0; i < this.length; i++) {
		var char = this.charCodeAt(i);
		hash = ((hash<<5)-hash)+char;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
    };
    function genIdHash (obj, longname) {
    	var version = obj.type.names[0];
    	var status = obj.defaultvalue;
    	var datetime = obj.name;
    	var desc = obj.description;
    	var combine = version+status+datetime+desc+longname;
    	// var hash = encodeURIComponent(combine);
    	var hash = combine.hashCode() + '';
    	hash = hash.replace(/-/g, '');
    	return hash;
    };
    function getModuleName (obj) {
    	switch (obj.kind) {
    	case 'class':
    		return obj.longname;
    		break;
    	default:
    		if (obj.memberof) {
    			return obj.memberof;
    		} else {
    			return obj.longname;
    		}
    		break;
    	}
    };
    var statusOptions = {
    	init : {
    		text: '초기화',
    		ignore: false
    	},
    	closed : {
    		text: '완료',
    		ignore: true
    	},
    	open : {
    		text: '진행중..',
    		ignore: false
    	}
    };
    var convertStatus = function (name) {
    	return (statusOptions[name]) ? statusOptions[name].text : name;
    };
    var genTodoListsObj_2 = function(objs, type, parentObj) {
		var ret = [];
		if (objs && objs.length) {
			objs.forEach(function (obj) {
				var version = obj.type.names[0];
				var status = obj.defaultvalue;
				var datetime = obj.name;
				var desc = obj.description;
				var longname = parentObj.longname;
				var id = genIdHash(obj, longname);
				var modulename = getModuleName(parentObj);
				ret.push({version:version, datetime:datetime, status:status, desc:desc, id:id, module:modulename, longname:longname, type:type});
			});
		}
		return ret;
	};
	var getTodoListsObj = function (item) {
		var obj = [];
		var todos = item.todo;
		var fixmes = item.fixme;
		var dones = item.done;
		var longname = item.longname;

		obj = _.union(obj, genTodoListsObj_2(todos, 'todo', item));
		obj = _.union(obj, genTodoListsObj_2(fixmes, 'fixme', item));
		obj = _.union(obj, genTodoListsObj_2(dones, 'done', item));

		return obj;
	};
	var getTodolistType = function (todolists, type) {
	    return _.filter(todolists, function(obj) { return obj.type == type });
	};
	todolists = getTodoListsObj(data);
	var todos = getTodolistType(todolists, 'todo');
	var fixmes = getTodolistType(todolists, 'fixme');
	var dones = getTodolistType(todolists, 'done');
?>
    <?js if (todos.length) { ?>
	<dt class="tag-todo">To Do:</dt>
    <dd class="tag-todo">
        <ul><?js todos.forEach(function(obj) {
		    var version = obj.version;
			var status = obj.status;
			var desc = obj.desc;
			var id = obj.id;
			var type = obj.type; ?>
		    <li><a href="#<?js= id ?>"><span class="status-<?js= status ?> status"><?js= convertStatus(status) ?></span> <span class="version"><?js= version ?></span> <span class="desc"><?js= desc ?></span></a></li>
		<?js }); ?></ul>
	</dd>
	<?js } ?>
	
    <?js if (fixmes.length) { ?>
	<dt class="tag-fixme">Fix Me:</dt>
    <dd class="tag-fixme">
        <ul><?js fixmes.forEach(function(obj) {
		    var version = obj.version;
			var status = obj.status;
			var desc = obj.desc;
			var id = obj.id;
			var type = obj.type; ?>
		    <li><a href="#<?js= id ?>"><span class="status-<?js= status ?> status"><?js= convertStatus(status) ?></span> <span class="version"><?js= version ?></span> <span class="desc"><?js= desc ?></span></a></li>
		<?js }); ?></ul>
	</dd>
	<?js } ?>

    <?js if (dones.length) { ?>
	<dt class="tag-done">Done:</dt>
    <dd class="tag-done">
        <ul><?js dones.forEach(function(obj) {
		    var version = obj.version;
			var status = obj.status;
			var desc = obj.desc;
			var id = obj.id;
			var type = obj.type; ?>
		    <li><a href="#<?js= id ?>"><span class="status-<?js= status ?> status"><?js= convertStatus(status) ?></span> <span class="version"><?js= version ?></span> <span class="desc"><?js= desc ?></span></a></li>
		<?js }); ?></ul>
	</dd>
	<?js } ?>

</dl>

<?js
    var properties = data.properties;
    if (properties && properties.length && properties.forEach) {
?>

    <h5 class="subsection-title">Properties:</h5>

    <?js= this.partial('properties.tmpl', data) ?>

<?js } ?>
